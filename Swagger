1.导入依赖
        <!--Swagger依赖-->
            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger2</artifactId>
                <version>2.9.2</version>
            </dependency>
            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger-ui</artifactId>
                <version>2.9.2</version>
            </dependency>
        <!--Swagger依赖结束-->
2.新建配置类

@Configuration //声明是配置类
@EnableSwagger2 //开启Swagger自动配置
public class swaggerConfig {
    //配置swagger的Docket实例
    @Bean
    public Docket getDocket(){
        return new Docket(DocumentationType.SWAGGER_2)
                .apiInfo(apiInfo())
                /*.enable(false)：是否启用swagger  如果为false,浏览器中不能访问(默认为true)*/
                .enable(flag)
                .select()
                /*RequestHandlerSelectors：配置扫描接口的方式
                 * basePackage：指定扫描的包
                 * any：扫描全部
                 * none：不扫描
                 * withClassAnnotation：扫描类上的注解，参数为一个注解的反射对象
                 * withMethodAnnotation：扫描方法上的注解*/
                .apis(RequestHandlerSelectors.basePackage("com.onlyk.swaggerdome.controller"))
                /*paths()：过滤路径*/
				//配置如何通过path过滤，即这里只扫描请求以/action开头的借口
		//       .paths(PathSelectors.ant("/action"))
                .build();
    }

	  //配置多个分组
    @Bean
    public Docket docket1(){
        return new Docket(DocumentationType.SWAGGER_2).groupName("group1");
	 }
    @Bean
    public Docket docket2(){
        return new Docket(DocumentationType.SWAGGER_2).groupName("group2");
	 }

    /**
     * 配置Swagger 信息==ApiInfo
     */
    private ApiInfo apiInfo(){
        //配置信息
        Contact contact=new Contact("only老K","https://blog.csdn.net/weixin_44255950","No Email");
        return new ApiInfo(
                "SwaggerAPI文档",		//标题
                "Only，我为自己带盐",	//描述	
                "v1.0",					//版本
                "https://blog.csdn.net/weixin_44255950",	//组织链接
                contact,	//联系人信息
                "Apache2.0",		//许可
                "https://blog.csdn.net/weixin_44255950",	//许可链接
                new ArrayList<>()		//扩展
        );
    }
}


3.接口配置
@Controller
public class swaggerController {
    @RequestMapping("/hello")
    @ResponseBody
    public String helloSwagger(){
        return "hello Swagger";
    }
    //只要我放回结果中有实体类就会扫描到
    @RequestMapping("/dome")
    @ResponseBody
    public Dome dome(){
        return new Dome();
    }
    //Operation接口
    @PostMapping("/test")
    @ApiOperation("hello控制类接口 ")
    public String hello(@ApiParam("用户名") String name){
        return "hello"+name;
    }
}

4.实体配置

@ApiModel("用户实体 ")
public class Dome {
    @ApiModelProperty("用户名")
    public String user;
    @ApiModelProperty("密码")
    public String pwd;
}


5.访问测试： http://localhost:8080/swagger-ui.html ,可以看到swagger的界面

6.常用的swagger注解
swagger注解
简单说明
@Api(tags = "xxx模块说明")
作用在模块类上
@ApiOperation( "xxx接口说明")
作用在接口方法上
@ApiModel(tags = "xxxPOJO说明")
作用在模型类上:如VO BO
@ApiModelProperty(values = "xxx属性说明")
作用在类方法和属性上
@ApiParam( "xxx参数说明")
作用在参数，方法和字段上
